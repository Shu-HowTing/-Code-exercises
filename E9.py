# -*- coding: utf-8 -*-
# Author: 小狼狗

"""
==============================================================================
                                动态规划
==============================================================================
"""

'''
在一个3 X N的长方形方格中，铺满1X2的骨牌（骨牌个数不限制），给定N，求方案数
    f[i][0] = f[i-2][0] + f[i-1][1] + f[i-2][2]
    f[i][1] = f[i-1][2]
    f[i][2] = f[i][0] + f[i-1][1]
    f[0][0] = f[1][1] = f[0][2] = 1
'''
def ways(N):
    f = [[0,0,0] for i in range(N+1)]
    f[0][0] = f[1][1] = f[0][2] = 1
    for i in range(1, N+1):
        f[i][0] = f[i-2][0] + f[i-1][1] + f[i-2][2]
        f[i][1] = f[i-1][2]
        f[i][2] = f[i][0] + f[i-1][1]
    #print(f)
    return f[N][0]
if __name__=='__main__':
    N = int(input("N = "))
    print(ways(N))

#=======================================================================================================
'''
给定一个长度为n(1 <= n <= 1000)的整数序列a[i]，求它的一个子序列(子序列即在原序列任意位置删除0或多个元素后的序列)，满足如下条件：
    1、该序列单调递增；
    2、在所有满足条件1的序列中长度是最长的
     d[1] = 1
     d[i] = max(d[j]+1|l[i]>l[k], k=1,2,3...i-1 )
     return max(d)
'''
def max_long(l):
    n = len(l)
    d = [1 for i in range(n)]
    for i in range(1, n):
        for j in range(i):
            if l[j] < l[i] and d[j]+1 > d[i]:
                d[i] = d[j] +1

    #print(d)
    return max(d)
if  __name__ == '__main__':
    L = [6, 2, 3, 3, 5, 4, 8, 7, 3]
    print(max_long(L))
#=======================================================================================================
'''
一堆石子，有n个，小明和小红轮流取石子，最少取1个，最多取2个，取到最后一个石子赢（或者是不能取就输），问谁有必胜策略
    状态定义：用函数f(n)=1或0 来表示面对n个石子的局面，先手的输赢。
            f(n)=1,先手必胜；f(n)=0来,先手必输(后手必胜)
    状态转化方程：f(i)=[(f(i-1)==0)||(f(i-2)==0)]
               如果这个状态(剩余i个石子)可以通过取1个石子或者取2个石子，让下一次状态(剩余i-1/i-2个石子)后手必胜，
               那么这个状态是先手必胜
    初始值:f(0) = 0  f(1)=f(2) = 1
'''
def pick_stone(N):
    f = [0 for i in range(N + 1)]
    f[1] = f[2] = 1
    for i in range(3, N+1):
        f[i] = (f[i-1]==0) or (f[i-2]==0)
    return f[-1]
if  __name__ == '__main__':
    N = int(input("请输入石子的个数："))
    if pick_stone(N) == 0:
        print("先手必输！")
    else:
       print("先手必胜！")
